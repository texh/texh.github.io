<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>perl on Jarrod Linahan</title>
    <link>https://jarrod.linahan.id.au/tags/perl/</link>
    <description>Recent content in perl on Jarrod Linahan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Feb 2013 18:00:54 +0000</lastBuildDate><atom:link href="https://jarrod.linahan.id.au/tags/perl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Convert bytes to readable units in Perl/Java/PHP</title>
      <link>https://jarrod.linahan.id.au/blog/convert-bytes-to-readable-units-in-perl/</link>
      <pubDate>Wed, 06 Feb 2013 18:00:54 +0000</pubDate>
      
      <guid>https://jarrod.linahan.id.au/blog/convert-bytes-to-readable-units-in-perl/</guid>
      <description>I recently used code similar to that below in VPSMon, and came across a need where it would be convenient to display bytes as a more human-friendly string in Perl. Basically Iâ€™m building a script, and I want to convert the amount of available/free RAM on a machine from bytes to gigabytes for display to a user, but I figured may as well cover all bases and have this around in case it needs to display other units/multiples in the future.</description>
    </item>
    
    <item>
      <title>Installing Perl from source</title>
      <link>https://jarrod.linahan.id.au/blog/installing-perl-from-source/</link>
      <pubDate>Tue, 14 Aug 2012 09:00:00 +0000</pubDate>
      
      <guid>https://jarrod.linahan.id.au/blog/installing-perl-from-source/</guid>
      <description>So I&amp;rsquo;ve done this a few times now, and every time I go to Google to find the same article just to make sure that I follow similar, if not the same, steps.
You may be thinking &amp;ldquo;Ch&amp;rsquo;yeah, it&amp;rsquo;s just a simple configure, make, make install&amp;rdquo;, or a quick poke on the Yum stick, but maybe not. It is a good idea to keep &amp;lsquo;The Old Perl&amp;rsquo; (generally 5.8.8 as I&amp;rsquo;m a centOS sucker) as removing it via yum would remove a whole bunch of other things that rely on it.</description>
    </item>
    
    <item>
      <title>Find user location using Perl</title>
      <link>https://jarrod.linahan.id.au/blog/find-user-location-using-perl/</link>
      <pubDate>Sun, 11 Mar 2012 09:00:00 +0000</pubDate>
      
      <guid>https://jarrod.linahan.id.au/blog/find-user-location-using-perl/</guid>
      <description>The other day I finally put up a simple landing page for a project that I&amp;rsquo;m working on. The site itself is fairly bare, and doesn&amp;rsquo;t offer any features. It&amp;rsquo;s essentially the old &amp;ldquo;Under Construction&amp;rdquo; page, but with balls.
Rather than simply putting it out on the wild internet and forgetting it, I thought it would be interesting to log a few details about anyone who visits the page, to gather a few key demographics about people interested in the service such as their country and the time they spend browsing the site, among other things.</description>
    </item>
    
    <item>
      <title>Where Am I? - Using Google Geocoding API with Perl</title>
      <link>https://jarrod.linahan.id.au/blog/using-googles-geocoding-api-with-perl/</link>
      <pubDate>Sun, 11 Mar 2012 09:00:00 +0000</pubDate>
      
      <guid>https://jarrod.linahan.id.au/blog/using-googles-geocoding-api-with-perl/</guid>
      <description>Quite some time ago I stumbled across a similar blog post to this one which detailed how to access Google Maps&#39; geocoding API to find latitude and longitude coordinates from a street address.
The process is extremely simple, and I just thought I&amp;rsquo;d give a quick overview of how the whole thing works.
So to start off with, the base URL for the API service we&amp;rsquo;ll be using is http://maps.google.com/maps/api/geocode/json?sensor=false&amp;amp;address=</description>
    </item>
    
  </channel>
</rss>
