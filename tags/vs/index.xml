<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vs on Jarrod Linahan</title>
    <link>https://jarrod.linahan.id.au/tags/vs/</link>
    <description>Recent content in vs on Jarrod Linahan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Sep 2018 02:14:12 +0000</lastBuildDate><atom:link href="https://jarrod.linahan.id.au/tags/vs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Compressing PNG Images from the Command Line</title>
      <link>https://jarrod.linahan.id.au/blog/compressing-png-images-from-command-line/</link>
      <pubDate>Tue, 04 Sep 2018 02:14:12 +0000</pubDate>
      
      <guid>https://jarrod.linahan.id.au/blog/compressing-png-images-from-command-line/</guid>
      <description>I&amp;rsquo;ve done gone and rebuilt this website once again.
See those little &amp;lsquo;me&amp;rsquo;s at the top of each page? They are were the biggest files being loaded across the wire when you visit a page on this website. For the sake of saving bits and bytes, I figured I&amp;rsquo;d shrink the images dimensions down from their original size to the size you see them now (80 pixels2 × 2).
Starting out with a bunch of files that were 398 pixels2 , and after a quick bit of Google-foo, I discovered that my mac had a secret tool on it called sips - The scriptable image processing system</description>
    </item>
    
    <item>
      <title>Node.js vs Java Play! Framework</title>
      <link>https://jarrod.linahan.id.au/blog/node-js-vs-java-play-framework/</link>
      <pubDate>Thu, 03 Apr 2014 00:24:00 +0000</pubDate>
      
      <guid>https://jarrod.linahan.id.au/blog/node-js-vs-java-play-framework/</guid>
      <description>After having somewhat of a heated Facebook conversation with a friend about the Ups and Downs of various web frameworks, I was inspired to benchmark a simple &amp;ldquo;Hello World&amp;rdquo; to compare the speed and resource usage of Node.js and the Play! Framework (using Java).
Being mostly Perl guys ourselves, my go-to tool for web wizardry is generally the awesome Catalyst MVC framework, can&amp;rsquo;t say the same about my friend.
All the tests below were completed on my Laptop – Intel Core i5 M480 CPU @ 2.</description>
    </item>
    
    <item>
      <title>LNPPCF vs. LAMP</title>
      <link>https://jarrod.linahan.id.au/blog/lnppcf-vs-lamp/</link>
      <pubDate>Tue, 16 Apr 2013 01:03:00 +0000</pubDate>
      
      <guid>https://jarrod.linahan.id.au/blog/lnppcf-vs-lamp/</guid>
      <description>Every day it seems that someone is writing introductions and reviews about how awesome using the so-coined LAMP (Linux, Apache, MySQL &amp;amp; PHP) stack is. I too was once a lover of this choice of software for getting things online, however over the past few years I’ve slowly replaced most of those with other free alternatives and haven’t looked back for a moment. This website, along with most others that I look after nowadays, are running what I guess you could call a LNPPCF stack.</description>
    </item>
    
  </channel>
</rss>
